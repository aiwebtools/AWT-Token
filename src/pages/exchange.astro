---
import Layout from '../layouts/Layout.astro';
import { WalletConnection } from '../components/WalletConnection';
---

<Layout title="Exchange AWT Tokens - AiWebTools.Ai">
  <main>
    <div class="exchange-container">
      <h1>Exchange AWT Tokens</h1>
      
      <div class="token-utility">
        <h2>AWT Token Benefits</h2>
        <ul>
          <li>Own operational instructions for all AiWebTools.Ai Agents</li>
          <li>Launch your own AI Agent marketplaces instantly</li>
          <li>Request custom operational instructions for new AI ideas</li>
          <li>Trade tokens for existing or custom-built AI solutions</li>
        </ul>
      </div>

      <div class="wallet-section">
        <h2>Connect Your Wallet</h2>
        <p class="wallet-info">Connect your wallet to exchange AWT tokens for operational instructions. Each transaction burns tokens, contributing to the token's scarcity.</p>
        <div class="wallet-connection">
          <WalletConnection client:only="react" />
        </div>
      </div>

      <div class="exchange-section">
        <h2>Request AWT Operational Instructions</h2>
        <div class="instructions-grid">
          <div class="instruction-card">
            <h3>Already Built AiWebTools.Ai Agent</h3>
            <p>Standard operational instructions for creating a basic AI agent. Perfect for getting started with your own AI marketplace.</p>
            <div class="price">1,000 AWT</div>
            <div class="burn-info">Tokens will be locked in liquidity pool</div>
            <button class="exchange-btn" id="basic-agent-btn">Lock Your Tokens For AWT Network Operational Instructions</button>
          </div>
          
          <div class="instruction-card">
            <h3>Custom AI Agent Operational Instructions New Build</h3>
            <p>Enhanced instructions with advanced customization capabilities. Ideal for specialized AI applications.</p>
            <div class="price">10,000 AWT</div>
            <div class="burn-info">Tokens will be locked in liquidity pool</div>
            <button class="exchange-btn" id="custom-agent-btn">Lock Your Tokens For AWT Network Operational Instructions</button>
          </div>

          <div class="instruction-card">
            <h3>Premium AI Suite</h3>
            <p>Complete suite of instructions for building complex AI systems. Access to all operational instructions ever built and future releases.</p>
            <div class="price">100,000 AWT</div>
            <div class="burn-info">Tokens will be locked in liquidity pool</div>
            <button class="exchange-btn" id="premium-suite-btn">Lock Your Tokens For AWT Network Operational Instructions</button>
          </div>
        </div>
      </div>

      <div class="token-info-section">
        <h2>AWT Token Overview</h2>
        <div class="token-info-grid">
          <div class="token-info-card">
            <h3>Token Distribution</h3>
            <ul>
              <li><strong>25%:</strong> Development and Research</li>
              <li><strong>15%:</strong> Marketing and Partnerships</li>
              <li><strong>20%:</strong> Community and Ecosystem Rewards</li>
              <li><strong>30%:</strong> Liquidity Pool (Locked)</li>
              <li><strong>10%:</strong> Founders and Team (subject to vesting)</li>
            </ul>
          </div>
          
          <div class="token-info-card">
            <h3>Token Utility</h3>
            <p>AWT Token serves as the key to the AiWebTools.Ai ecosystem, granting holders unique benefits and enabling a sustainable model of value creation. Built on the Solana blockchain, AWT leverages Solana's high-speed, low-cost infrastructure to ensure efficiency and scalability.</p>
          </div>

          <div class="token-info-card">
            <h3>Value Proposition</h3>
            <p>By holding AWT Tokens, users gain exclusive access to the operational instructions powering all AI Agents developed by AiWebTools.Ai. This allows token holders to effortlessly deploy these instructions and launch their own AI Agent marketplaces.</p>
          </div>
        </div>
      </div>

      <a href="/" class="back-btn">← Back to White Paper</a>
    </div>
  </main>
</Layout>

<script>
  declare global {
    interface Window {
      ethereum?: any;
      solana?: any;
    }
  }

  // Initialize purchase buttons
  const initializePurchaseButtons = () => {
    const buttons = {
      'basic-agent-btn': 1000,
      'custom-agent-btn': 10000,
      'premium-suite-btn': 100000
    };

    Object.entries(buttons).forEach(([btnId, amount]) => {
      const button = document.getElementById(btnId);
      if (button) {
        button.addEventListener('click', () => handlePurchase(amount, btnId));
      }
    });
  };

  // Handle purchase
  const handlePurchase = async (amount: number, productId: string) => {
    if (!window.ethereum && !window.solana) {
      const walletChoice = await showWalletModal();
      if (!walletChoice) return;
      
      try {
        if (walletChoice === 'metamask') {
          await connectMetaMask();
        } else if (walletChoice === 'coinbase') {
          await connectCoinbase();
        } else if (walletChoice === 'ledger') {
          await connectLedger();
        }
      } catch (error) {
        console.error('Wallet connection failed:', error);
        alert('Failed to connect wallet. Please try again.');
        return;
      }
    }

    try {
      if (window.ethereum) {
        await handleEVMPurchase(amount, productId);
      } else if (window.solana) {
        await handleSolanaPurchase(amount, productId);
      }
    } catch (error) {
      console.error('Purchase failed:', error);
      alert('Transaction failed. Please try again.');
    }
  };

  const showWalletModal = () => {
    return new Promise((resolve) => {
      const modal = document.createElement('div');
      modal.className = 'wallet-modal';
      modal.innerHTML = `
        <div class="wallet-modal-content">
          <h2>Connect Your Wallet</h2>
          <button class="wallet-option" data-wallet="metamask">
            <img src="/metamask-icon.svg" alt="MetaMask" />
            Connect MetaMask Wallet
          </button>
          <button class="wallet-option" data-wallet="ledger">
            <img src="/ledger-icon.svg" alt="Ledger" />
            Connect Ledger Hardware Wallet
          </button>
          <button class="wallet-option" data-wallet="coinbase">
            <img src="/coinbase-icon.svg" alt="Coinbase" />
            Connect Coinbase Wallet
          </button>
          <button class="close-modal">Cancel</button>
        </div>
      `;

      document.body.appendChild(modal);

      const handleClick = (e: Event) => {
        const target = e.target as HTMLElement;
        if (target.classList.contains('wallet-option')) {
          const wallet = target.getAttribute('data-wallet');
          modal.remove();
          resolve(wallet);
        } else if (target.classList.contains('close-modal') || target === modal) {
          modal.remove();
          resolve(null);
        }
      };

      modal.addEventListener('click', handleClick);
    });
  };

  const connectMetaMask = async () => {
    if (typeof window.ethereum !== 'undefined') {
      try {
        await window.ethereum.request({ method: 'eth_requestAccounts' });
      } catch (error) {
        throw new Error('MetaMask connection failed');
      }
    } else {
      window.open('https://metamask.io/download.html', '_blank');
      throw new Error('Please install MetaMask');
    }
  };

  const connectCoinbase = async () => {
    // Implement Coinbase Wallet connection
    window.open('https://www.coinbase.com/wallet', '_blank');
    throw new Error('Please install Coinbase Wallet');
  };

  const connectLedger = async () => {
    // Implement Ledger connection
    window.open('https://www.ledger.com/', '_blank');
    throw new Error('Please connect your Ledger device');
  };

  // Handle EVM-based purchase
  const handleEVMPurchase = async (amount: number, productId: string) => {
    try {
      const accounts = await window.ethereum.request({
        method: 'eth_requestAccounts'
      });
      
      console.log(`Processing EVM purchase of ${amount} AWT for product ${productId}`);
      
    } catch (error) {
      throw new Error('EVM purchase failed');
    }
  };

  // Handle Solana-based purchase
  const handleSolanaPurchase = async (amount: number, productId: string) => {
    try {
      const resp = await window.solana.connect();
      
      console.log(`Processing Solana purchase of ${amount} AWT for product ${productId}`);
      
    } catch (error) {
      throw new Error('Solana purchase failed');
    }
  };

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initializePurchaseButtons);
</script>

<style>
  main {
    min-height: 100vh;
    background: #f4f4f9;
    padding: 2rem;
  }

  .exchange-container {
    max-width: 1000px;
    margin: 0 auto;
  }

  h1 {
    color: #0056b3;
    text-align: center;
    margin-bottom: 2rem;
  }

  h2 {
    color: #0056b3;
    margin-bottom: 1.5rem;
  }

  .token-utility {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
  }

  .token-utility ul {
    list-style: none;
    padding: 0;
  }

  .token-utility li {
    margin-bottom: 1rem;
    padding-left: 1.5rem;
    position: relative;
  }

  .token-utility li:before {
    content: "✓";
    color: #0056b3;
    position: absolute;
    left: 0;
    font-weight: bold;
  }

  .wallet-section {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
  }

  .wallet-info {
    text-align: center;
    margin-bottom: 1.5rem;
    color: #666;
  }

  .wallet-connection {
    display: flex;
    justify-content: center;
    margin-top: 1rem;
  }

  .instructions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
  }

  .instruction-card {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .instruction-card h3 {
    color: #0056b3;
    margin: 0 0 1rem 0;
  }

  .price {
    font-size: 1.25rem;
    font-weight: 600;
    color: #0056b3;
    margin: 1rem 0;
  }

  .burn-info {
    font-size: 0.875rem;
    color: #666;
    margin-bottom: 1rem;
    font-style: italic;
  }

  .exchange-btn {
    width: 100%;
    padding: 0.75rem;
    background: #0056b3;
    color: white;
    border: none;
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s;
    font-size: 0.9rem;
    white-space: normal;
    line-height: 1.2;
    min-height: 60px;
  }

  .exchange-btn:hover {
    background: #004080;
  }

  .token-info-section {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin: 2rem 0;
  }

  .token-info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
  }

  .token-info-card {
    padding: 1.5rem;
    border-radius: 8px;
    background: #f8f9fa;
    border: 1px solid #e9ecef;
  }

  .token-info-card h3 {
    color: #0056b3;
    margin: 0 0 1rem 0;
    font-size: 1.2rem;
  }

  .token-info-card ul {
    list-style: none;
    padding: 0;
  }

  .token-info-card li {
    margin-bottom: 0.5rem;
    padding-left: 1.5rem;
    position: relative;
  }

  .token-info-card li:before {
    content: "•";
    color: #0056b3;
    position: absolute;
    left: 0;
    font-weight: bold;
  }

  .token-info-card p {
    color: #495057;
    line-height: 1.6;
  }

  .back-btn {
    display: inline-block;
    margin-top: 2rem;
    color: #0056b3;
    text-decoration: none;
    font-weight: 600;
  }

  .back-btn:hover {
    text-decoration: underline;
  }

  .wallet-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .wallet-modal-content {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    width: 90%;
    max-width: 400px;
  }

  .wallet-modal-content h2 {
    margin-top: 0;
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .wallet-option {
    display: flex;
    align-items: center;
    width: 100%;
    padding: 1rem;
    margin-bottom: 1rem;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    background: white;
    cursor: pointer;
    transition: all 0.2s;
  }

  .wallet-option:hover {
    border-color: #0056b3;
    background: #f8f9fa;
  }

  .wallet-option img {
    width: 24px;
    height: 24px;
    margin-right: 1rem;
  }

  .close-modal {
    width: 100%;
    padding: 0.75rem;
    background: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 1rem;
  }

  .close-modal:hover {
    background: #c82333;
  }

  @media (max-width: 600px) {
    .instructions-grid, .token-info-grid {
      grid-template-columns: 1fr;
    }
  }
</style>